'use strict';

var _index = require('../index.js');

var _immutable = require('immutable');

var _graphql = require('graphql');

describe('TypeTests', function () {
    describe('isFloat', function () {
        it('Returns true if the type is a float', function () {
            expect((0, _index.isFloat)((0, _immutable.fromJS)({ type: _graphql.GraphQLFloat }))).toBeTruthy();
        });
    });
    describe('isInt', function () {
        it('Returns true if the type is an int', function () {
            expect((0, _index.isInt)((0, _immutable.fromJS)({ type: _graphql.GraphQLInt }))).toBeTruthy();
        });
    });
    describe('isString', function () {
        it('Returns true if the type is a string', function () {
            expect((0, _index.isString)((0, _immutable.fromJS)({ type: _graphql.GraphQLString }))).toBeTruthy();
        });
    });
});

describe('KeyedList', function () {
    describe('asMap', function () {
        it('Returns a map of the values', function () {

            var testType = new _graphql.GraphQLObjectType({
                name: 'KeyListAsMapTest',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString
                        },
                        name: {
                            type: _graphql.GraphQLString
                        }
                    };
                }
            });
            var keyedList = (0, _index.KeyedList)(testType);
            expect(keyedList._typeConfig.fields().asMap.resolve({
                'test1': {
                    'id': "test1"
                },
                'test2': {
                    'id': "test1"
                }
            })).toEqual({
                'test1': {
                    'id': "test1"
                },
                'test2': {
                    'id': "test1"
                }
            });
        });
    });

    describe('keys', function () {
        it('Returns a list of the keys after aggregation', function () {

            var testType = new _graphql.GraphQLObjectType({
                name: 'KeyListAsMapTest',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString
                        },
                        name: {
                            type: _graphql.GraphQLString
                        }
                    };
                }
            });
            var keyedList = (0, _index.KeyedList)(testType);
            expect(keyedList._typeConfig.fields().keys.resolve((0, _immutable.fromJS)({
                'test1': {
                    'id': "test1"
                },
                'test2': {
                    'id': "test1"
                }
            }))).toEqual(['test1', 'test2']);
        });
    });

    describe('values', function () {
        it('Returns the values in arrays', function () {
            var testType = new _graphql.GraphQLObjectType({
                name: 'KeyListAsMapTest',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString
                        },
                        name: {
                            type: _graphql.GraphQLString
                        }
                    };
                }
            });

            var keyedList = (0, _index.KeyedList)(testType);
            expect(keyedList._typeConfig.fields().values.resolve((0, _immutable.Map)({
                'test1': {
                    'id': "test1",
                    'name': "paul"
                },
                'test2': {
                    'id': "test1",
                    'name': "paul"
                }
            }))).toEqual([{
                'id': "test1",
                'name': "paul"
            }, {
                'id': "test1",
                'name': "paul"
            }]);
        });
    });
});

describe('AggregationType', function () {
    describe('values', function () {
        it('Returns a list of values', function () {
            var testType = new _graphql.GraphQLObjectType({
                name: 'TestType',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString
                        },
                        name: {
                            type: _graphql.GraphQLString
                        }
                    };
                }
            });
            var myAggregation = (0, _index.AggregationType)(testType);
            expect(myAggregation._typeConfig.fields().values.resolve([{
                id: 'test',
                name: 'John'
            }, {
                id: 'test2',
                name: 'Richard'
            }])).toEqual([{
                id: 'test',
                name: 'John'
            }, {
                id: 'test2',
                name: 'Richard'
            }]);
        });
    });

    describe('count', function () {
        it('Returns a amount of values in the supplied array', function () {
            var testType = new _graphql.GraphQLObjectType({
                name: 'TestType',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString
                        },
                        name: {
                            type: _graphql.GraphQLString
                        }
                    };
                }
            });
            var myAggregation = (0, _index.AggregationType)(testType);
            expect(myAggregation._typeConfig.fields().count.resolve([{
                id: 'test',
                name: 'John'
            }, {
                id: 'test2',
                name: 'Richard'
            }])).toEqual(2);
        });
    });

    describe('first', function () {
        it('Returns the first item in the array', function () {
            var testType = new _graphql.GraphQLObjectType({
                name: 'TestType',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString
                        },
                        name: {
                            type: _graphql.GraphQLString
                        }
                    };
                }
            });
            var myAggregation = (0, _index.AggregationType)(testType);
            expect(myAggregation._typeConfig.fields().first.resolve([{
                id: 'test',
                name: 'John'
            }, {
                id: 'test2',
                name: 'Richard'
            }])).toEqual({
                id: 'test',
                name: 'John'
            });
        });
    });

    describe('last', function () {
        it('Returns the last item in the array', function () {
            var testType = new _graphql.GraphQLObjectType({
                name: 'TestType',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString
                        },
                        name: {
                            type: _graphql.GraphQLString
                        }
                    };
                }
            });
            var myAggregation = (0, _index.AggregationType)(testType);
            expect(myAggregation._typeConfig.fields().last.resolve([{
                id: 'test',
                name: 'John'
            }, {
                id: 'test2',
                name: 'Richard'
            }])).toEqual({
                id: 'test2',
                name: 'Richard'
            });
        });
    });

    describe('reverse', function () {
        it('Returns the collection in reverse order.', function () {
            var testType = new _graphql.GraphQLObjectType({
                name: 'TestType',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString
                        },
                        name: {
                            type: _graphql.GraphQLString
                        }
                    };
                }
            });
            var myAggregation = (0, _index.AggregationType)(testType);
            var result = myAggregation._typeConfig.fields().reverse.resolve([{
                id: 'test',
                name: 'John'
            }, {
                id: 'test2',
                name: 'Richard'
            }]);
            expect(result.toArray()).toEqual([{
                id: 'test2',
                name: 'Richard'
            }, {
                id: 'test',
                name: 'John'
            }]);
        });
    });

    describe('groupedBy', function () {
        it('Returns the collection mapped by a field', function (done) {
            var testType = new _graphql.GraphQLObjectType({
                name: 'TestTypeGroupedBy',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString,
                            resolve: function resolve(obj) {
                                return obj.id;
                            }
                        },
                        name: {
                            type: _graphql.GraphQLString,
                            resolve: function resolve(obj) {
                                return obj.name;
                            }
                        }
                    };
                }
            });

            var myAggregation = (0, _index.AggregationType)(testType);
            var groupByObj = myAggregation._typeConfig.fields().groupedBy.resolve([{
                id: 'test',
                name: 'John'
            }, {
                id: 'test2',
                name: 'Richard'
            }, {
                id: 'test3',
                name: 'Richard'
            }]);
            return myAggregation._typeConfig.fields().groupedBy.type._typeConfig.fields().name.resolve(groupByObj).then(function (result) {
                expect(result.toObject()).toEqual({
                    John: (0, _immutable.List)([{
                        id: 'test',
                        name: 'John'
                    }]),
                    Richard: (0, _immutable.List)([{
                        id: 'test2',
                        name: 'Richard'
                    }, {
                        id: 'test3',
                        name: 'Richard'
                    }])
                });
                done();
            }).catch(done.fail);
        });
    });

    describe('sum', function () {
        it('Returns the sum of a field', function (done) {
            var testType = new _graphql.GraphQLObjectType({
                name: 'TestNumbers',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString,
                            resolve: function resolve(obj) {
                                return obj.id;
                            }
                        },
                        number: {
                            type: _graphql.GraphQLFloat,
                            resolve: function resolve(obj) {
                                return obj.number;
                            }
                        }
                    };
                }
            });

            var myAggregation = (0, _index.AggregationType)(testType);
            var sumObj = myAggregation._typeConfig.fields().sum.resolve([{
                id: 'test',
                number: 3
            }, {
                id: 'test2',
                number: 3
            }, {
                id: 'test3',
                number: 4
            }]);
            return myAggregation._typeConfig.fields().sum.type._typeConfig.fields().number.resolve(sumObj).then(function (result) {
                expect(result).toEqual(10);
                done();
            }).catch(done.fail);
        });
    });

    describe('average', function () {
        it('Returns the average of a field', function (done) {
            var testType = new _graphql.GraphQLObjectType({
                name: 'TestNumbers',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString,
                            resolve: function resolve(obj) {
                                return obj.id;
                            }
                        },
                        number: {
                            type: _graphql.GraphQLFloat,
                            resolve: function resolve(obj) {
                                return obj.number;
                            }
                        }
                    };
                }
            });

            var myAggregation = (0, _index.AggregationType)(testType);
            var averageObj = myAggregation._typeConfig.fields().average.resolve([{
                id: 'test',
                number: 1
            }, {
                id: 'test2',
                number: 5
            }, {
                id: 'test3',
                number: 9
            }]);
            return myAggregation._typeConfig.fields().average.type._typeConfig.fields().number.resolve(averageObj).then(function (result) {
                expect(result).toEqual(5);
                done();
            }).catch(done.fail);
        });
    });

    describe('min', function () {
        it('Returns the smallest number in a field', function (done) {
            var testType = new _graphql.GraphQLObjectType({
                name: 'TestNumbers',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString,
                            resolve: function resolve(obj) {
                                return obj.id;
                            }
                        },
                        number: {
                            type: _graphql.GraphQLFloat,
                            resolve: function resolve(obj) {
                                return obj.number;
                            }
                        }
                    };
                }
            });

            var myAggregation = (0, _index.AggregationType)(testType);
            var minObj = myAggregation._typeConfig.fields().min.resolve([{
                id: 'test',
                number: 1
            }, {
                id: 'test2',
                number: 5
            }, {
                id: 'test3',
                number: 9
            }]);
            return myAggregation._typeConfig.fields().min.type._typeConfig.fields().number.resolve(minObj).then(function (result) {
                expect(result).toEqual(1);
                done();
            }).catch(done.fail);
        });
    });

    describe('max', function () {
        it('Returns the largest number in a field', function (done) {
            var testType = new _graphql.GraphQLObjectType({
                name: 'TestNumbers',
                fields: function fields() {
                    return {
                        id: {
                            type: _graphql.GraphQLString,
                            resolve: function resolve(obj) {
                                return obj.id;
                            }
                        },
                        number: {
                            type: _graphql.GraphQLFloat,
                            resolve: function resolve(obj) {
                                return obj.number;
                            }
                        }
                    };
                }
            });

            var myAggregation = (0, _index.AggregationType)(testType);
            var maxObj = myAggregation._typeConfig.fields().max.resolve([{
                id: 'test',
                number: 1
            }, {
                id: 'test2',
                number: 5
            }, {
                id: 'test3',
                number: 9
            }]);

            return myAggregation._typeConfig.fields().max.type._typeConfig.fields().number.resolve(maxObj).then(function (result) {
                expect(result).toEqual(9);
                done();
            }).catch(done.fail);
        });
    });

    describe('filter', function () {

        describe('gt', function () {
            it('Filters by values greater then. ', function (done) {
                var testType = new _graphql.GraphQLObjectType({
                    name: 'TestNumberInt',
                    fields: function fields() {
                        return {
                            id: {
                                type: _graphql.GraphQLString,
                                resolve: function resolve(obj) {
                                    return obj.id;
                                }
                            },
                            number: {
                                type: _graphql.GraphQLInt,
                                resolve: function resolve(obj) {
                                    return obj.number;
                                }
                            }
                        };
                    }
                });

                var myAggregation = (0, _index.AggregationType)(testType);
                var maxObj = myAggregation._typeConfig.fields().filter.resolve([{
                    id: 'test',
                    number: 1
                }, {
                    id: 'test2',
                    number: 5
                }, {
                    id: 'test3',
                    number: 9
                }]);
                return myAggregation._typeConfig.fields().filter.type._typeConfig.fields().number.resolve(maxObj, { gt: 5 }).then(function (result) {
                    expect(result.toArray()).toEqual([{
                        id: 'test3',
                        number: 9
                    }]);
                    done();
                }).catch(done.fail);
            });
        });
        describe('lt', function () {
            it('Filters by values less then. ', function (done) {
                var testType = new _graphql.GraphQLObjectType({
                    name: 'TestNumberInt',
                    fields: function fields() {
                        return {
                            id: {
                                type: _graphql.GraphQLString,
                                resolve: function resolve(obj) {
                                    return obj.id;
                                }
                            },
                            number: {
                                type: _graphql.GraphQLInt,
                                resolve: function resolve(obj) {
                                    return obj.number;
                                }
                            }
                        };
                    }
                });

                var myAggregation = (0, _index.AggregationType)(testType);
                var maxObj = myAggregation._typeConfig.fields().filter.resolve([{
                    id: 'test',
                    number: 1
                }, {
                    id: 'test2',
                    number: 5
                }, {
                    id: 'test3',
                    number: 9
                }]);
                myAggregation._typeConfig.fields().filter.type._typeConfig.fields().number.resolve(maxObj, { lt: 5 }).then(function (result) {
                    expect(result.toArray()).toEqual([{
                        id: 'test',
                        number: 1
                    }]);
                    done();
                }).catch(done.fail);
            });
        });
        describe('gte', function () {
            it('Filters by values greater then or equal to. ', function (done) {
                var testType = new _graphql.GraphQLObjectType({
                    name: 'TestNumberInt',
                    fields: function fields() {
                        return {
                            id: {
                                type: _graphql.GraphQLString,
                                resolve: function resolve(obj) {
                                    return obj.id;
                                }
                            },
                            number: {
                                type: _graphql.GraphQLInt,
                                resolve: function resolve(obj) {
                                    return obj.number;
                                }
                            }
                        };
                    }
                });

                var myAggregation = (0, _index.AggregationType)(testType);
                var maxObj = myAggregation._typeConfig.fields().filter.resolve([{
                    id: 'test',
                    number: 1
                }, {
                    id: 'test2',
                    number: 5
                }, {
                    id: 'test3',
                    number: 9
                }]);

                myAggregation._typeConfig.fields().filter.type._typeConfig.fields().number.resolve(maxObj, { gte: 5 }).then(function (result) {
                    expect(result.toArray()).toEqual([{
                        id: 'test2',
                        number: 5
                    }, {
                        id: 'test3',
                        number: 9
                    }]);
                    done();
                }).catch(done.fail);
            });
        });
        describe('lte', function () {
            it('Filters by values less then or equal to. ', function (done) {
                var testType = new _graphql.GraphQLObjectType({
                    name: 'TestNumberInt',
                    fields: function fields() {
                        return {
                            id: {
                                type: _graphql.GraphQLString,
                                resolve: function resolve(obj) {
                                    return obj.id;
                                }
                            },
                            number: {
                                type: _graphql.GraphQLInt,
                                resolve: function resolve(obj) {
                                    return obj.number;
                                }
                            }
                        };
                    }
                });

                var myAggregation = (0, _index.AggregationType)(testType);
                var maxObj = myAggregation._typeConfig.fields().filter.resolve([{
                    id: 'test',
                    number: 1
                }, {
                    id: 'test2',
                    number: 5
                }, {
                    id: 'test3',
                    number: 9
                }]);

                myAggregation._typeConfig.fields().filter.type._typeConfig.fields().number.resolve(maxObj, { lte: 5 }).then(function (result) {
                    expect(result.toArray()).toEqual([{
                        id: 'test',
                        number: 1
                    }, {
                        id: 'test2',
                        number: 5
                    }]);
                    done();
                }).catch(done.fail);
            });
        });
        describe('equal', function () {
            it('Filters by values equal to ', function (done) {
                var testType = new _graphql.GraphQLObjectType({
                    name: 'TestNumberInt',
                    fields: function fields() {
                        return {
                            id: {
                                type: _graphql.GraphQLString,
                                resolve: function resolve(obj) {
                                    return obj.id;
                                }
                            },
                            number: {
                                type: _graphql.GraphQLInt,
                                resolve: function resolve(obj) {
                                    return obj.number;
                                }
                            }
                        };
                    }
                });

                var myAggregation = (0, _index.AggregationType)(testType);
                var maxObj = myAggregation._typeConfig.fields().filter.resolve([{
                    id: 'test',
                    number: 1
                }, {
                    id: 'test2',
                    number: 5
                }, {
                    id: 'test3',
                    number: 9
                }]);

                myAggregation._typeConfig.fields().filter.type._typeConfig.fields().number.resolve(maxObj, { equal: 5 }).then(function (result) {
                    expect(result.toArray()).toEqual([{
                        id: 'test2',
                        number: 5
                    }]);
                    done();
                }).catch(done.fail);
            });
        });
        // describe('not', () => {
        //     it('Returns values that don\'t match the filter ', () => {
        //         var testType = new GraphQLObjectType({
        //             name: 'TestNumberInt',
        //             fields: () => ({
        //                 id: {
        //                     type: GraphQLString,
        //                     resolve: obj => obj.id
        //                 },
        //                 number: {
        //                     type: GraphQLInt,
        //                     resolve: obj => obj.number
        //                 }
        //             })
        //         })

        //         var myAggregation = AggregationType(testType);
        //         var maxObj = myAggregation._typeConfig.fields().filter.resolve([{
        //             id: 'test',
        //             number: 1,
        //         },{  
        //             id: 'test2',
        //             number: 5,
        //         },{
        //             id: 'test3',
        //             number: 9, 
        //         }])


        //         myAggregation
        //             ._typeConfig.fields().filter.type
        //             ._typeConfig.fields().number.resolve(maxObj, {equal: 5})
        //             .then(result => {
        //                 expect(result.toArray())
        //                 .toEqual([{
        //                     id: 'test2',
        //                     number: 5
        //                 }])
        //                 done()
        //             })
        //             .catch(done.fail)


        //         expect(
        //             myAggregation
        //                 ._typeConfig.fields().filter.type
        //                 ._typeConfig.fields().number.resolve(maxObj, {not: {equal: 5}}).toArray())
        //         .toEqual([{
        //             id: 'test',
        //             number: 1,
        //         },{
        //             id: 'test3',
        //             number: 9, 
        //         }])
        //     })
        // })   

        // describe('FilterStringOperations', () => {
        //     it('Contains arguments for filtering via strings.', () => {
        //         var testType = new GraphQLObjectType({
        //             name: 'TestNumberInt',
        //             fields: () => ({
        //                 id: {
        //                     type: GraphQLString,
        //                     resolve: obj => obj.id
        //                 },
        //                 number: {
        //                     type: GraphQLInt,
        //                     resolve: obj => obj.number
        //                 }
        //             })
        //         })
        //         var myAggregation = AggregationType(testType);

        //          console.log(myAggregation
        //                 ._typeConfig.fields().filter.type
        //                 ._typeConfig.fields().id.args);

        //     });
        // });
    });
});